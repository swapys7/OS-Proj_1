
---- GROUP ----

Ethan Petuchowski <ethanp@utexas.edu>
EID: ecp456
CSID: ethanp

Justin Hust <justin.hust@utexas.edu>
EID: jkh2367
CSID: jkhust

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, and lecture notes.

None.

                                 Alarm Clock
                                 ====

---- DATA STRUCTURES ----

Added to struct thread:
    struct list_elem sleepelem;    /* list element for sleeping list */
    int64_t end_time;              /* Time the thread is scheduled to wake up */
    struct semaphore sleepsema;    /* to pause thread while it's on the sleep list */

Added static variable to thread.c:
    struct list sleep_list;        /* Processes that have called thread_sleep() */

Added lock to timer.c:
    static struct lock timer_sleep_lock;   /* semaphore for timer_sleep function */


---- ALGORITHMS ----

Acquire lock and disable interrupts when calling timer_sleep().
Calculate and save time to wake up.
Put thread on sleep list.
Release lock and enable interrupts.
Sema_down the sleep_sema that is a part of that thread's struct,
    so that it stops executing without busy-waiting.

void check_sleep_list(void);
This method runs everytime the timer_interrupt() calls thread_tick().
It traverses the linked-list of sleeping threads, and sema_up's the sleep_sema
    on those threads that are done sleeping, and takes them off the sleep_list.



---- SYNCHRONIZATION ----

The main thing is acquiring a lock and disabling interrupts when calling
timer_sleep(). The running thread must acquire a lock so that the threads can
figure out the right time to wake up and add themselves to the sleep list in-
one-go, without having the issue where a time to wake up is calculated for the
first thread, then a bunch of other threads run this function and add
themselves to the sleep list, then finally the first thread actually puts
itself on the list. This would produce undesireable results. The running
thread must disable interrupts so that the timer doesn't tick will the thread
is figuring out how long to sleep.


---- RATIONALE ----


The crucial piece in our design is the semaphore that is attached to each
thread. The advantage to this is that it allows us to avoid busy-waiting. When
a thread calls sema_down on its own empty semaphore, it is forced to sit there
waiting peacefully until another thread sema_up's it.

Having a sleep_list was another design decision. It is the single location
where the kernel can look at and keep track of the sleeping threads. It only
needs to check this location when interrupts of on because interrupts are only
turned off when a process needs to execute in as close to an 'atomic' fashion
as possible. This was an appropriate way of implementing this feature in this
project where there are never so many sleeping threads, but in a situation
where there are a lot of sleeping threads at any given moment, one may want to
rethink this implementation. Maybe keep a binary tree sorted by the time to
wake up, and be able to wake up whole branches of the tree in one step.

                            Priority Queue
                                 ====

---- DATA STRUCTURES ----

>> Copy here the declaration of each new or changed `struct' or `struct'
>> member, global or static variable, `typedef', or enumeration.
>> Identify the purpose of each in 25 words or less.


Added to struct thread:

    struct list lock_list;         /* list of locks currently held by this thread */
    struct list lock_need;     /* list of locks this thread is waiting to acquire */
    int old_priority;    /* keeps a base priority to restore to after lock-release */

Added to struct semaphore:

    struct list_elem lock_elem;     /* For storing lock on thread's lock_list */
    struct list_elem lock_need_elem;  /* To store lock on thread's lock_need list */

/* Array of lists in order of priority. Each element is a linked-list of threads
   with a given PRIORITY in THREAD_READY state, that is, processes
   that are ready to run but not actually running. */
struct list ready_list[PRI_MAX + 1];

---- ALGORITHMS ----

>> Briefly describe your implementation of thread_join() and how it
>> interacts with thread termination.

----------------------------------------
void thread_set_priority (int new_priority);
----------------------------------------
Sets the thread's OLD_PRIORITY struct-element to the new_priority. However, it
only sets the threads PRIORITY element if there is not a thread with a higher
priority currently waiting on this thread to finish using a synchronization
primitive.

/* Donate priority to a given thread */
----------------------------------------
void thread_donate_priority (struct thread *donate_from, struct thread *donate_to);
----------------------------------------
replaces the TO thread's PRIORITY struct-member with that of the FROM thread.
If the thread being donated to is currently on the ready list, it is moved to
the proper ready_list associated with its new PRIORITY level.
If the thread is waiting on locks, find all the threads currently holding
those locks, and give them the same priority that was just donated to this
thread.

/* When a thread releases a lock, but it's still holding another lock,
 * it needs to update its priority to be equal to the highest of the waiters
 * on the remaining locks it carries.*/
----------------------------------------
void thread_restore_priority (struct thread *t);
----------------------------------------
We do this by finding the thread with the highest priority of all the threads
waiting for something this lock has, and saving that priority as the thread's
new priority. The main thing this function does is prevent priority inversion.

----------------------------------------
static struct thread *next_thread_to_run (void);
----------------------------------------
Chooses which thread the scheduler should run next by going through each
ready_list in decending order, and running the first thread it finds. It is
able to cycle through threads with the same priority in a FIFO manner because
it always places old threads on the back of their priority's ready list, and
takes from off the front when finding the next thread to run.

----------------------------------------
tid_t
thread_create (const char *name, int priority, thread_func *function, void *aux);
----------------------------------------
Puts thread on the ready_list associated with its priority, and if that
priority is higher than the priority of the currently running thread, the
current thread yields to the created thread.

----------------------------------------
void lock_acquire (struct lock *lock);
----------------------------------------
Add the lock to the lock_need list. If the lock already has a holder, then if
the current thread has a higher priority than it, the current thread must
donate its priority to the lock's holder. The chaining of priority donation
and so on is handled in the thread_donate_priority method, and is explained
above. When the lock actually does acquire the lock it wants, it adds that
lock to the list of locks it holds.

----------------------------------------
void lock_release (struct lock *lock);
----------------------------------------
We added code to remove the lock from the list of locks the thread holds, and
call restore_priority, which is described above.

----------------------------------------
void sema_up (struct semaphore *sema);
----------------------------------------
Now pops the highest_priority_waiter instead of just the frontmost waiter

----------------------------------------
void cond_signal (struct condition *cond, struct lock *lock UNUSED);
----------------------------------------
Instead of calling sema_up on the first thread to cond_wait, it calls sema_up
on the highest-priority thread to have called cond_wait. This is done using
the method list_pop_sema_highest_waiters.

---- SYNCHRONIZATION ----
Instead of using a donor queue to maintain a list of donated priorities, we
maintained a list of the locks each thread holds, and a list of the locks each
thread wants. So if a thread is holding a lock that another thread is waiting
on, our code will make sure that the threading holding the lock temporarily
has a priority equal to that of the highest thread waiting on it.

---- RATIONALE ----

This design has the advantage of simplicity. Instead of mainting proper
sorting of the donor queue, our style of synchroniztion, described in the
SYNCHRONIZATION section, allowed us to forget about keeping a lot of priority-
related information stored on each thread. Instead, we dynamically calculted
the threads new effective priority only when it released a lock, which was the
only time a new priority was needed.

Although it's likely that our method involves more computation on the part of
the kernel, the kernel also has to keep track of much less at any one time,
and instead "figures out" what it needs right when it is needed. Also, the
order of threads acquiring and releasing locks in the general environment does
not affect any threads until that moment when it releases a lock.
